// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using ApiSdk.V1.Benefits.Item.Grants;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.V1.Benefits.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\benefits\{id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BenefitsItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The grants property</summary>
        public global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder Grants
        {
            get => new global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BenefitsItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/benefits/{id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BenefitsItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/benefits/{id}", rawUrl)
        {
        }
        /// <summary>
        /// Delete a benefit.&gt; [!WARNING]&gt; Every grants associated with the benefit will be revoked.&gt; Users will lose access to the benefit.**Scopes**: `benefits:write`
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.NotPermitted">When receiving a 403 status code</exception>
        /// <exception cref="global::ApiSdk.Models.ResourceNotFound">When receiving a 404 status code</exception>
        /// <exception cref="global::ApiSdk.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "403", global::ApiSdk.Models.NotPermitted.CreateFromDiscriminatorValue },
                { "404", global::ApiSdk.Models.ResourceNotFound.CreateFromDiscriminatorValue },
                { "422", global::ApiSdk.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get a benefit by ID.**Scopes**: `benefits:read` `benefits:write`
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Benefit"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.ResourceNotFound">When receiving a 404 status code</exception>
        /// <exception cref="global::ApiSdk.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Models.Benefit?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Models.Benefit> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::ApiSdk.Models.ResourceNotFound.CreateFromDiscriminatorValue },
                { "422", global::ApiSdk.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Models.Benefit>(requestInfo, global::ApiSdk.Models.Benefit.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a benefit.**Scopes**: `benefits:write`
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Benefit"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.ResourceNotFound">When receiving a 404 status code</exception>
        /// <exception cref="global::ApiSdk.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Models.Benefit?> PatchAsync(global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Models.Benefit> PatchAsync(global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::ApiSdk.Models.ResourceNotFound.CreateFromDiscriminatorValue },
                { "422", global::ApiSdk.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Models.Benefit>(requestInfo, global::ApiSdk.Models.Benefit.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Delete a benefit.&gt; [!WARNING]&gt; Every grants associated with the benefit will be revoked.&gt; Users will lose access to the benefit.**Scopes**: `benefits:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get a benefit by ID.**Scopes**: `benefits:read` `benefits:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a benefit.**Scopes**: `benefits:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitsItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitsItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitsItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.BenefitCustomUpdate"/>, <see cref="global::ApiSdk.Models.BenefitDiscordUpdate"/>, <see cref="global::ApiSdk.Models.BenefitDownloadablesUpdate"/>, <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryUpdate"/>, <see cref="global::ApiSdk.Models.BenefitLicenseKeysUpdate"/>, <see cref="global::ApiSdk.Models.BenefitMeterCreditUpdate"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitsPatchRequestBody : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitCustomUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitCustomUpdate? BenefitCustomUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitCustomUpdate BenefitCustomUpdate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitDiscordUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitDiscordUpdate? BenefitDiscordUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitDiscordUpdate BenefitDiscordUpdate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitDownloadablesUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitDownloadablesUpdate? BenefitDownloadablesUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitDownloadablesUpdate BenefitDownloadablesUpdate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitGitHubRepositoryUpdate? BenefitGitHubRepositoryUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitGitHubRepositoryUpdate BenefitGitHubRepositoryUpdate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitLicenseKeysUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitLicenseKeysUpdate? BenefitLicenseKeysUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitLicenseKeysUpdate BenefitLicenseKeysUpdate { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitMeterCreditUpdate"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitMeterCreditUpdate? BenefitMeterCreditUpdate { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitMeterCreditUpdate BenefitMeterCreditUpdate { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.V1.Benefits.Item.BenefitsItemRequestBuilder.BenefitsPatchRequestBody();
                result.BenefitCustomUpdate = new global::ApiSdk.Models.BenefitCustomUpdate();
                result.BenefitDiscordUpdate = new global::ApiSdk.Models.BenefitDiscordUpdate();
                result.BenefitDownloadablesUpdate = new global::ApiSdk.Models.BenefitDownloadablesUpdate();
                result.BenefitGitHubRepositoryUpdate = new global::ApiSdk.Models.BenefitGitHubRepositoryUpdate();
                result.BenefitLicenseKeysUpdate = new global::ApiSdk.Models.BenefitLicenseKeysUpdate();
                result.BenefitMeterCreditUpdate = new global::ApiSdk.Models.BenefitMeterCreditUpdate();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BenefitCustomUpdate != null || BenefitDiscordUpdate != null || BenefitDownloadablesUpdate != null || BenefitGitHubRepositoryUpdate != null || BenefitLicenseKeysUpdate != null || BenefitMeterCreditUpdate != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BenefitCustomUpdate, BenefitDiscordUpdate, BenefitDownloadablesUpdate, BenefitGitHubRepositoryUpdate, BenefitLicenseKeysUpdate, BenefitMeterCreditUpdate);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::ApiSdk.Models.BenefitCustomUpdate>(null, BenefitCustomUpdate, BenefitDiscordUpdate, BenefitDownloadablesUpdate, BenefitGitHubRepositoryUpdate, BenefitLicenseKeysUpdate, BenefitMeterCreditUpdate);
            }
        }
    }
}
#pragma warning restore CS0618
