// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.V1.Benefits.Item.Grants
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\benefits\{id}\grants
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GrantsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GrantsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/benefits/{id}/grants{?customer_id*,is_granted*,limit*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GrantsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/benefits/{id}/grants{?customer_id*,is_granted*,limit*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// List the individual grants for a benefit.It&apos;s especially useful to check if a user has been granted a benefit.**Scopes**: `benefits:read` `benefits:write`
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.ListResource_BenefitGrant_"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.ResourceNotFound">When receiving a 404 status code</exception>
        /// <exception cref="global::ApiSdk.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Models.ListResource_BenefitGrant_?> GetAsync(Action<RequestConfiguration<global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder.GrantsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Models.ListResource_BenefitGrant_> GetAsync(Action<RequestConfiguration<global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder.GrantsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::ApiSdk.Models.ResourceNotFound.CreateFromDiscriminatorValue },
                { "422", global::ApiSdk.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Models.ListResource_BenefitGrant_>(requestInfo, global::ApiSdk.Models.ListResource_BenefitGrant_.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List the individual grants for a benefit.It&apos;s especially useful to check if a user has been granted a benefit.**Scopes**: `benefits:read` `benefits:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder.GrantsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder.GrantsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List the individual grants for a benefit.It&apos;s especially useful to check if a user has been granted a benefit.**Scopes**: `benefits:read` `benefits:write`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GrantsRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter by customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("customer_id")]
            public string? CustomerId { get; set; }
#nullable restore
#else
            [QueryParameter("customer_id")]
            public string CustomerId { get; set; }
#endif
            /// <summary>Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned. </summary>
            [QueryParameter("is_granted")]
            public bool? IsGranted { get; set; }
            /// <summary>Size of a page, defaults to 10. Maximum is 100.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Page number, defaults to 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GrantsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ApiSdk.V1.Benefits.Item.Grants.GrantsRequestBuilder.GrantsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
