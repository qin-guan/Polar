// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Polar.OpenAPI.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Polar.OpenAPI.V1.External_organizations
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\external_organizations\
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class External_organizationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public External_organizationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/external_organizations/{?limit*,name*,organization_id*,page*,platform*,sorting*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public External_organizationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/external_organizations/{?limit*,name*,organization_id*,page*,platform*,sorting*}", rawUrl)
        {
        }
        /// <summary>
        /// List external organizations.**Scopes**: `external_organizations:read`
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.ListResource_ExternalOrganization_"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Polar.OpenAPI.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.Models.ListResource_ExternalOrganization_?> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder.External_organizationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.Models.ListResource_ExternalOrganization_> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder.External_organizationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Polar.OpenAPI.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.Models.ListResource_ExternalOrganization_>(requestInfo, global::Polar.OpenAPI.Models.ListResource_ExternalOrganization_.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List external organizations.**Scopes**: `external_organizations:read`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder.External_organizationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder.External_organizationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List external organizations.**Scopes**: `external_organizations:read`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class External_organizationsRequestBuilderGetQueryParameters 
        {
            /// <summary>Size of a page, defaults to 10. Maximum is 100.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Filter by name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>Filter by organization ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("organization_id")]
            public string? OrganizationId { get; set; }
#nullable restore
#else
            [QueryParameter("organization_id")]
            public string OrganizationId { get; set; }
#endif
            /// <summary>Page number, defaults to 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Filter by platform.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("platform")]
            public string? Platform { get; set; }
#nullable restore
#else
            [QueryParameter("platform")]
            public string Platform { get; set; }
#endif
            /// <summary>Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sorting")]
            public string? Sorting { get; set; }
#nullable restore
#else
            [QueryParameter("sorting")]
            public string Sorting { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class External_organizationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Polar.OpenAPI.V1.External_organizations.External_organizationsRequestBuilder.External_organizationsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
