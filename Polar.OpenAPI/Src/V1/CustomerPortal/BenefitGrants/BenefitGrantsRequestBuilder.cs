// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Polar.OpenAPI.Models;
using Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Polar.OpenAPI.V1.CustomerPortal.BenefitGrants
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\customer-portal\benefit-grants\
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BenefitGrantsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Polar.OpenAPI.v1.customerPortal.benefitGrants.item collection</summary>
        /// <param name="position">The benefit grant ID.</param>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.Item.BenefitGrantsItemRequestBuilder"/></returns>
        public global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.Item.BenefitGrantsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.Item.BenefitGrantsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BenefitGrantsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/customer-portal/benefit-grants/{?benefit_id*,checkout_id*,limit*,order_id*,organization_id*,page*,sorting*,subscription_id*,type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BenefitGrantsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/customer-portal/benefit-grants/{?benefit_id*,checkout_id*,limit*,order_id*,organization_id*,page*,sorting*,subscription_id*,type*}", rawUrl)
        {
        }
        /// <summary>
        /// List benefits grants of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.ListResource_CustomerBenefitGrant_"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Polar.OpenAPI.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.Models.ListResource_CustomerBenefitGrant_?> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder.BenefitGrantsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.Models.ListResource_CustomerBenefitGrant_> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder.BenefitGrantsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Polar.OpenAPI.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.Models.ListResource_CustomerBenefitGrant_>(requestInfo, global::Polar.OpenAPI.Models.ListResource_CustomerBenefitGrant_.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// List benefits grants of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder.BenefitGrantsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder.BenefitGrantsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// List benefits grants of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitGrantsRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter by benefit ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("benefit_id")]
            public string? BenefitId { get; set; }
#nullable restore
#else
            [QueryParameter("benefit_id")]
            public string BenefitId { get; set; }
#endif
            /// <summary>Filter by checkout ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("checkout_id")]
            public string? CheckoutId { get; set; }
#nullable restore
#else
            [QueryParameter("checkout_id")]
            public string CheckoutId { get; set; }
#endif
            /// <summary>Size of a page, defaults to 10. Maximum is 100.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Filter by order ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("order_id")]
            public string? OrderId { get; set; }
#nullable restore
#else
            [QueryParameter("order_id")]
            public string OrderId { get; set; }
#endif
            /// <summary>Filter by organization ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("organization_id")]
            public string? OrganizationId { get; set; }
#nullable restore
#else
            [QueryParameter("organization_id")]
            public string OrganizationId { get; set; }
#endif
            /// <summary>Page number, defaults to 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sorting")]
            public string? Sorting { get; set; }
#nullable restore
#else
            [QueryParameter("sorting")]
            public string Sorting { get; set; }
#endif
            /// <summary>Filter by subscription ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("subscription_id")]
            public string? SubscriptionId { get; set; }
#nullable restore
#else
            [QueryParameter("subscription_id")]
            public string SubscriptionId { get; set; }
#endif
            /// <summary>Filter by benefit type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitGrantsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.BenefitGrants.BenefitGrantsRequestBuilder.BenefitGrantsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
