// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Polar.OpenAPI.Models;
using Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\customer-portal\customers\me\payment-methods
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PaymentMethodsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Polar.OpenAPI.v1.customerPortal.customers.me.paymentMethods.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.Item.PaymentMethodsItemRequestBuilder"/></returns>
        public global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.Item.PaymentMethodsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.Item.PaymentMethodsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PaymentMethodsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/customer-portal/customers/me/payment-methods{?limit*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PaymentMethodsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/customer-portal/customers/me/payment-methods{?limit*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Get saved payment methods of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Polar.OpenAPI.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.Models.ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__?> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.Models.ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__> GetAsync(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Polar.OpenAPI.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.Models.ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__>(requestInfo, global::Polar.OpenAPI.Models.ListResource_Union_PaymentMethodCard__PaymentMethodGeneric__.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a payment method to the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Polar.OpenAPI.Models.HTTPValidationError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse?> PostAsPaymentMethodsPostResponseAsync(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse> PostAsPaymentMethodsPostResponseAsync(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Polar.OpenAPI.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse>(requestInfo, global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a payment method to the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Polar.OpenAPI.Models.HTTPValidationError">When receiving a 422 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsPaymentMethodsPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse?> PostAsync(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse> PostAsync(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "422", global::Polar.OpenAPI.Models.HTTPValidationError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse>(requestInfo, global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get saved payment methods of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Add a payment method to the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Polar.OpenAPI.Models.CustomerPaymentMethodCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.PaymentMethodCard"/>, <see cref="global::Polar.OpenAPI.Models.PaymentMethodGeneric"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PaymentMethodsPostResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.PaymentMethodCard"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.PaymentMethodCard? PaymentMethodCard { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.PaymentMethodCard PaymentMethodCard { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.PaymentMethodGeneric"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.PaymentMethodGeneric? PaymentMethodGeneric { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.PaymentMethodGeneric PaymentMethodGeneric { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsPostResponse();
                result.PaymentMethodCard = new global::Polar.OpenAPI.Models.PaymentMethodCard();
                result.PaymentMethodGeneric = new global::Polar.OpenAPI.Models.PaymentMethodGeneric();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentMethodCard != null || PaymentMethodGeneric != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentMethodCard, PaymentMethodGeneric);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Polar.OpenAPI.Models.PaymentMethodCard>(null, PaymentMethodCard, PaymentMethodGeneric);
            }
        }
        /// <summary>
        /// Get saved payment methods of the authenticated customer.**Scopes**: `customer_portal:read` `customer_portal:write`
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PaymentMethodsRequestBuilderGetQueryParameters 
        {
            /// <summary>Size of a page, defaults to 10. Maximum is 100.</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>Page number, defaults to 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PaymentMethodsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PaymentMethodsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.PaymentMethodCard"/>, <see cref="global::Polar.OpenAPI.Models.PaymentMethodGeneric"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PaymentMethodsResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.PaymentMethodCard"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.PaymentMethodCard? PaymentMethodCard { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.PaymentMethodCard PaymentMethodCard { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.PaymentMethodGeneric"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.PaymentMethodGeneric? PaymentMethodGeneric { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.PaymentMethodGeneric PaymentMethodGeneric { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.V1.CustomerPortal.Customers.Me.PaymentMethods.PaymentMethodsRequestBuilder.PaymentMethodsResponse();
                result.PaymentMethodCard = new global::Polar.OpenAPI.Models.PaymentMethodCard();
                result.PaymentMethodGeneric = new global::Polar.OpenAPI.Models.PaymentMethodGeneric();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(PaymentMethodCard != null || PaymentMethodGeneric != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(PaymentMethodCard, PaymentMethodGeneric);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Polar.OpenAPI.Models.PaymentMethodCard>(null, PaymentMethodCard, PaymentMethodGeneric);
            }
        }
    }
}
#pragma warning restore CS0618
