// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Polar.OpenAPI.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Polar.OpenAPI.V1.Oauth2.Authorize
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\oauth2\authorize
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AuthorizeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/oauth2/authorize", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthorizeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/oauth2/authorize", rawUrl)
        {
        }
        /// <summary>
        /// Authorize
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse?> GetAsAuthorizeGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse> GetAsAuthorizeGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse>(requestInfo, global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Authorize
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsAuthorizeGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse>(requestInfo, global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Authorize
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseOrganization"/>, <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseUser"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseOrganization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.AuthorizeResponseOrganization? AuthorizeResponseOrganization { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.AuthorizeResponseOrganization AuthorizeResponseOrganization { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseUser"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.AuthorizeResponseUser? AuthorizeResponseUser { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.AuthorizeResponseUser AuthorizeResponseUser { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("sub_type")?.GetStringValue();
                var result = new global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeGetResponse();
                if("organization".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AuthorizeResponseOrganization = new global::Polar.OpenAPI.Models.AuthorizeResponseOrganization();
                }
                else if("user".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AuthorizeResponseUser = new global::Polar.OpenAPI.Models.AuthorizeResponseUser();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AuthorizeResponseOrganization != null)
                {
                    return AuthorizeResponseOrganization.GetFieldDeserializers();
                }
                else if(AuthorizeResponseUser != null)
                {
                    return AuthorizeResponseUser.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AuthorizeResponseOrganization != null)
                {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.AuthorizeResponseOrganization>(null, AuthorizeResponseOrganization);
                }
                else if(AuthorizeResponseUser != null)
                {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.AuthorizeResponseUser>(null, AuthorizeResponseUser);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseOrganization"/>, <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseUser"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AuthorizeResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseOrganization"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.AuthorizeResponseOrganization? AuthorizeResponseOrganization { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.AuthorizeResponseOrganization AuthorizeResponseOrganization { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.AuthorizeResponseUser"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.AuthorizeResponseUser? AuthorizeResponseUser { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.AuthorizeResponseUser AuthorizeResponseUser { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("sub_type")?.GetStringValue();
                var result = new global::Polar.OpenAPI.V1.Oauth2.Authorize.AuthorizeRequestBuilder.AuthorizeResponse();
                if("organization".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AuthorizeResponseOrganization = new global::Polar.OpenAPI.Models.AuthorizeResponseOrganization();
                }
                else if("user".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.AuthorizeResponseUser = new global::Polar.OpenAPI.Models.AuthorizeResponseUser();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AuthorizeResponseOrganization != null)
                {
                    return AuthorizeResponseOrganization.GetFieldDeserializers();
                }
                else if(AuthorizeResponseUser != null)
                {
                    return AuthorizeResponseUser.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(AuthorizeResponseOrganization != null)
                {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.AuthorizeResponseOrganization>(null, AuthorizeResponseOrganization);
                }
                else if(AuthorizeResponseUser != null)
                {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.AuthorizeResponseUser>(null, AuthorizeResponseUser);
                }
            }
        }
    }
}
#pragma warning restore CS0618
