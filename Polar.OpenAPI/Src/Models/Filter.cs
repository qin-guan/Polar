// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    /// <summary>
    /// The filter to apply on events that&apos;ll be used to calculate the meter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Filter : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The clauses property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Polar.OpenAPI.Models.Filter.Filter_clauses>? Clauses { get; set; }
#nullable restore
#else
        public List<global::Polar.OpenAPI.Models.Filter.Filter_clauses> Clauses { get; set; }
#endif
        /// <summary>The conjunction property</summary>
        public global::Polar.OpenAPI.Models.FilterConjunction? Conjunction { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.Filter"/> and sets the default values.
        /// </summary>
        public Filter()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.Filter"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.Filter CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.Filter();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clauses", n => { Clauses = n.GetCollectionOfObjectValues<global::Polar.OpenAPI.Models.Filter.Filter_clauses>(global::Polar.OpenAPI.Models.Filter.Filter_clauses.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conjunction", n => { Conjunction = n.GetEnumValue<global::Polar.OpenAPI.Models.FilterConjunction>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Polar.OpenAPI.Models.Filter.Filter_clauses>("clauses", Clauses);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.FilterConjunction>("conjunction", Conjunction);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.Filter"/>, <see cref="global::Polar.OpenAPI.Models.FilterClause"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Filter_clauses : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.Filter"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.Filter? Filter { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.Filter Filter { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.FilterClause"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.FilterClause? FilterClause { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.FilterClause FilterClause { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.Filter.Filter_clauses"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.Filter.Filter_clauses CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.Filter.Filter_clauses();
                result.Filter = new global::Polar.OpenAPI.Models.Filter();
                result.FilterClause = new global::Polar.OpenAPI.Models.FilterClause();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(Filter != null || FilterClause != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(Filter, FilterClause);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Polar.OpenAPI.Models.Filter>(null, Filter, FilterClause);
            }
        }
    }
}
#pragma warning restore CS0618
