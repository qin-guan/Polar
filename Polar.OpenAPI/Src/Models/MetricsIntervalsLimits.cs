// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    /// <summary>
    /// Limits for each interval.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MetricsIntervalsLimits : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Limits for the day interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit? Day { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit Day { get; set; }
#endif
        /// <summary>Limits for the hour interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit? Hour { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit Hour { get; set; }
#endif
        /// <summary>Limits for the month interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit? Month { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit Month { get; set; }
#endif
        /// <summary>Limits for the week interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit? Week { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit Week { get; set; }
#endif
        /// <summary>Limits for the year interval.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit? Year { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.MetricsIntervalLimit Year { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.MetricsIntervalsLimits"/> and sets the default values.
        /// </summary>
        public MetricsIntervalsLimits()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.MetricsIntervalsLimits"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.MetricsIntervalsLimits CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.MetricsIntervalsLimits();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "day", n => { Day = n.GetObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>(global::Polar.OpenAPI.Models.MetricsIntervalLimit.CreateFromDiscriminatorValue); } },
                { "hour", n => { Hour = n.GetObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>(global::Polar.OpenAPI.Models.MetricsIntervalLimit.CreateFromDiscriminatorValue); } },
                { "month", n => { Month = n.GetObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>(global::Polar.OpenAPI.Models.MetricsIntervalLimit.CreateFromDiscriminatorValue); } },
                { "week", n => { Week = n.GetObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>(global::Polar.OpenAPI.Models.MetricsIntervalLimit.CreateFromDiscriminatorValue); } },
                { "year", n => { Year = n.GetObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>(global::Polar.OpenAPI.Models.MetricsIntervalLimit.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>("day", Day);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>("hour", Hour);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>("month", Month);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>("week", Week);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.MetricsIntervalLimit>("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
