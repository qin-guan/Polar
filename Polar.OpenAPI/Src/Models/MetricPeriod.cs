// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MetricPeriod : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The active_subscriptions property</summary>
        public int? ActiveSubscriptions { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The average_order_value property</summary>
        public int? AverageOrderValue { get; set; }
        /// <summary>The cumulative_revenue property</summary>
        public int? CumulativeRevenue { get; set; }
        /// <summary>The monthly_recurring_revenue property</summary>
        public int? MonthlyRecurringRevenue { get; set; }
        /// <summary>The new_subscriptions property</summary>
        public int? NewSubscriptions { get; set; }
        /// <summary>The new_subscriptions_revenue property</summary>
        public int? NewSubscriptionsRevenue { get; set; }
        /// <summary>The one_time_products property</summary>
        public int? OneTimeProducts { get; set; }
        /// <summary>The one_time_products_revenue property</summary>
        public int? OneTimeProductsRevenue { get; set; }
        /// <summary>The orders property</summary>
        public int? Orders { get; set; }
        /// <summary>The renewed_subscriptions property</summary>
        public int? RenewedSubscriptions { get; set; }
        /// <summary>The renewed_subscriptions_revenue property</summary>
        public int? RenewedSubscriptionsRevenue { get; set; }
        /// <summary>The revenue property</summary>
        public int? Revenue { get; set; }
        /// <summary>Timestamp of this period data.</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.MetricPeriod"/> and sets the default values.
        /// </summary>
        public MetricPeriod()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.MetricPeriod"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.MetricPeriod CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.MetricPeriod();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active_subscriptions", n => { ActiveSubscriptions = n.GetIntValue(); } },
                { "average_order_value", n => { AverageOrderValue = n.GetIntValue(); } },
                { "cumulative_revenue", n => { CumulativeRevenue = n.GetIntValue(); } },
                { "monthly_recurring_revenue", n => { MonthlyRecurringRevenue = n.GetIntValue(); } },
                { "new_subscriptions", n => { NewSubscriptions = n.GetIntValue(); } },
                { "new_subscriptions_revenue", n => { NewSubscriptionsRevenue = n.GetIntValue(); } },
                { "one_time_products", n => { OneTimeProducts = n.GetIntValue(); } },
                { "one_time_products_revenue", n => { OneTimeProductsRevenue = n.GetIntValue(); } },
                { "orders", n => { Orders = n.GetIntValue(); } },
                { "renewed_subscriptions", n => { RenewedSubscriptions = n.GetIntValue(); } },
                { "renewed_subscriptions_revenue", n => { RenewedSubscriptionsRevenue = n.GetIntValue(); } },
                { "revenue", n => { Revenue = n.GetIntValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("active_subscriptions", ActiveSubscriptions);
            writer.WriteIntValue("average_order_value", AverageOrderValue);
            writer.WriteIntValue("cumulative_revenue", CumulativeRevenue);
            writer.WriteIntValue("monthly_recurring_revenue", MonthlyRecurringRevenue);
            writer.WriteIntValue("new_subscriptions", NewSubscriptions);
            writer.WriteIntValue("new_subscriptions_revenue", NewSubscriptionsRevenue);
            writer.WriteIntValue("one_time_products", OneTimeProducts);
            writer.WriteIntValue("one_time_products_revenue", OneTimeProductsRevenue);
            writer.WriteIntValue("orders", Orders);
            writer.WriteIntValue("renewed_subscriptions", RenewedSubscriptions);
            writer.WriteIntValue("renewed_subscriptions_revenue", RenewedSubscriptionsRevenue);
            writer.WriteIntValue("revenue", Revenue);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
