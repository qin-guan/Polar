// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    /// <summary>
    /// An active customer subscription.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CustomerStateSubscription : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of the subscription.</summary>
        public int? Amount { get; set; }
        /// <summary>Whether the subscription will be canceled at the end of the current period.</summary>
        public bool? CancelAtPeriodEnd { get; set; }
        /// <summary>The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at? CanceledAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at CanceledAt { get; set; }
#endif
        /// <summary>Creation timestamp of the object.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The currency of the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The end timestamp of the current billing period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end? CurrentPeriodEnd { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end CurrentPeriodEnd { get; set; }
#endif
        /// <summary>The start timestamp of the current billing period.</summary>
        public DateTimeOffset? CurrentPeriodStart { get; set; }
        /// <summary>Key-value object storing custom field values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription_custom_field_data? CustomFieldData { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription_custom_field_data CustomFieldData { get; set; }
#endif
        /// <summary>The ID of the applied discount, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id? DiscountId { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id DiscountId { get; set; }
#endif
        /// <summary>The timestamp when the subscription will end.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at? EndsAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at EndsAt { get; set; }
#endif
        /// <summary>The ID of the subscription.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription_metadata Metadata { get; set; }
#endif
        /// <summary>Last modification timestamp of the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at? ModifiedAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at ModifiedAt { get; set; }
#endif
        /// <summary>The price_id property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceId { get; set; }
#nullable restore
#else
        public string PriceId { get; set; }
#endif
        /// <summary>The ID of the subscribed product.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductId { get; set; }
#nullable restore
#else
        public string ProductId { get; set; }
#endif
        /// <summary>The interval at which the subscription recurs.</summary>
        public global::Polar.OpenAPI.Models.SubscriptionRecurringInterval? RecurringInterval { get; set; }
        /// <summary>The timestamp when the subscription started.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at? StartedAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at StartedAt { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription"/> and sets the default values.
        /// </summary>
        public CustomerStateSubscription()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.CustomerStateSubscription CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.CustomerStateSubscription();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetIntValue(); } },
                { "cancel_at_period_end", n => { CancelAtPeriodEnd = n.GetBoolValue(); } },
                { "canceled_at", n => { CanceledAt = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "current_period_end", n => { CurrentPeriodEnd = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end.CreateFromDiscriminatorValue); } },
                { "current_period_start", n => { CurrentPeriodStart = n.GetDateTimeOffsetValue(); } },
                { "custom_field_data", n => { CustomFieldData = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_custom_field_data>(global::Polar.OpenAPI.Models.CustomerStateSubscription_custom_field_data.CreateFromDiscriminatorValue); } },
                { "discount_id", n => { DiscountId = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id.CreateFromDiscriminatorValue); } },
                { "ends_at", n => { EndsAt = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_metadata>(global::Polar.OpenAPI.Models.CustomerStateSubscription_metadata.CreateFromDiscriminatorValue); } },
                { "modified_at", n => { ModifiedAt = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at.CreateFromDiscriminatorValue); } },
                { "price_id", n => { PriceId = n.GetStringValue(); } },
                { "product_id", n => { ProductId = n.GetStringValue(); } },
                { "recurring_interval", n => { RecurringInterval = n.GetEnumValue<global::Polar.OpenAPI.Models.SubscriptionRecurringInterval>(); } },
                { "started_at", n => { StartedAt = n.GetObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at>(global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("amount", Amount);
            writer.WriteBoolValue("cancel_at_period_end", CancelAtPeriodEnd);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at>("canceled_at", CanceledAt);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end>("current_period_end", CurrentPeriodEnd);
            writer.WriteDateTimeOffsetValue("current_period_start", CurrentPeriodStart);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_custom_field_data>("custom_field_data", CustomFieldData);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id>("discount_id", DiscountId);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at>("ends_at", EndsAt);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_metadata>("metadata", Metadata);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at>("modified_at", ModifiedAt);
            writer.WriteStringValue("price_id", PriceId);
            writer.WriteStringValue("product_id", ProductId);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.SubscriptionRecurringInterval>("recurring_interval", RecurringInterval);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at>("started_at", StartedAt);
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_canceled_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1? CustomerStateSubscriptionCanceledAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1 CustomerStateSubscriptionCanceledAtMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_canceled_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.CustomerStateSubscriptionCanceledAtMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionCanceledAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionCanceledAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_canceled_atMember1>(null, CustomerStateSubscriptionCanceledAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_current_period_end : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1? CustomerStateSubscriptionCurrentPeriodEndMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1 CustomerStateSubscriptionCurrentPeriodEndMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_current_period_end();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.CustomerStateSubscriptionCurrentPeriodEndMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionCurrentPeriodEndMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionCurrentPeriodEndMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_current_period_endMember1>(null, CustomerStateSubscriptionCurrentPeriodEndMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_discount_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1? CustomerStateSubscriptionDiscountIdMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1 CustomerStateSubscriptionDiscountIdMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_discount_id();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.CustomerStateSubscriptionDiscountIdMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionDiscountIdMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionDiscountIdMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_discount_idMember1>(null, CustomerStateSubscriptionDiscountIdMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_ends_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1? CustomerStateSubscriptionEndsAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1 CustomerStateSubscriptionEndsAtMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_ends_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.CustomerStateSubscriptionEndsAtMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionEndsAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionEndsAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_ends_atMember1>(null, CustomerStateSubscriptionEndsAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_modified_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1? CustomerStateSubscriptionModifiedAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1 CustomerStateSubscriptionModifiedAtMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_modified_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.CustomerStateSubscriptionModifiedAtMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionModifiedAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionModifiedAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_modified_atMember1>(null, CustomerStateSubscriptionModifiedAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CustomerStateSubscription_started_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1? CustomerStateSubscriptionStartedAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1 CustomerStateSubscriptionStartedAtMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.CustomerStateSubscription.CustomerStateSubscription_started_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.CustomerStateSubscriptionStartedAtMember1 = new global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(CustomerStateSubscriptionStartedAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CustomerStateSubscriptionStartedAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.CustomerStateSubscription_started_atMember1>(null, CustomerStateSubscriptionStartedAtMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
