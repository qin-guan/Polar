// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    /// <summary>
    /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.BenefitCustom"/>, <see cref="global::Polar.OpenAPI.Models.BenefitDiscord"/>, <see cref="global::Polar.OpenAPI.Models.BenefitDownloadables"/>, <see cref="global::Polar.OpenAPI.Models.BenefitGitHubRepository"/>, <see cref="global::Polar.OpenAPI.Models.BenefitLicenseKeys"/>, <see cref="global::Polar.OpenAPI.Models.BenefitMeterCredit"/>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Benefit : IComposedTypeWrapper, IParsable
    {
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitCustom"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitCustom? BenefitCustom { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitCustom BenefitCustom { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitDiscord"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitDiscord? BenefitDiscord { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitDiscord BenefitDiscord { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitDownloadables"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitDownloadables? BenefitDownloadables { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitDownloadables BenefitDownloadables { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitGitHubRepository"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitGitHubRepository? BenefitGitHubRepository { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitGitHubRepository BenefitGitHubRepository { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitLicenseKeys"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitLicenseKeys? BenefitLicenseKeys { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitLicenseKeys BenefitLicenseKeys { get; set; }
#endif
        /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.BenefitMeterCredit"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.BenefitMeterCredit? BenefitMeterCredit { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.BenefitMeterCredit BenefitMeterCredit { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.Benefit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.Benefit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var result = new global::Polar.OpenAPI.Models.Benefit();
            result.BenefitCustom = new global::Polar.OpenAPI.Models.BenefitCustom();
            result.BenefitDiscord = new global::Polar.OpenAPI.Models.BenefitDiscord();
            result.BenefitDownloadables = new global::Polar.OpenAPI.Models.BenefitDownloadables();
            result.BenefitGitHubRepository = new global::Polar.OpenAPI.Models.BenefitGitHubRepository();
            result.BenefitLicenseKeys = new global::Polar.OpenAPI.Models.BenefitLicenseKeys();
            result.BenefitMeterCredit = new global::Polar.OpenAPI.Models.BenefitMeterCredit();
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            if(BenefitCustom != null || BenefitDiscord != null || BenefitDownloadables != null || BenefitGitHubRepository != null || BenefitLicenseKeys != null || BenefitMeterCredit != null)
            {
                return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BenefitCustom, BenefitDiscord, BenefitDownloadables, BenefitGitHubRepository, BenefitLicenseKeys, BenefitMeterCredit);
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.BenefitCustom>(null, BenefitCustom, BenefitDiscord, BenefitDownloadables, BenefitGitHubRepository, BenefitLicenseKeys, BenefitMeterCredit);
        }
    }
}
#pragma warning restore CS0618
