// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProductPrice : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AmountType { get; set; }
#nullable restore
#else
        public string AmountType { get; set; }
#endif
        /// <summary>The maximum amount in cents that can be charged, regardless of the number of units consumed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount? CapAmount { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount CapAmount { get; set; }
#endif
        /// <summary>Creation timestamp of the object.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>The ID of the price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the price is archived and no longer available.</summary>
        public bool? IsArchived { get; set; }
        /// <summary>The maximum amount the customer can pay.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount? MaximumAmount { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount MaximumAmount { get; set; }
#endif
        /// <summary>The meter associated to the price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPriceMeter? Meter { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPriceMeter Meter { get; set; }
#endif
        /// <summary>The ID of the meter associated to the price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MeterId { get; set; }
#nullable restore
#else
        public string MeterId { get; set; }
#endif
        /// <summary>The minimum amount the customer can pay.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount? MinimumAmount { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount MinimumAmount { get; set; }
#endif
        /// <summary>Last modification timestamp of the object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at? ModifiedAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at ModifiedAt { get; set; }
#endif
        /// <summary>The initial amount shown to the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount? PresetAmount { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount PresetAmount { get; set; }
#endif
        /// <summary>The price in cents.</summary>
        public int? PriceAmount { get; set; }
        /// <summary>The currency.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PriceCurrency { get; set; }
#nullable restore
#else
        public string PriceCurrency { get; set; }
#endif
        /// <summary>The ID of the product owning the price.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductId { get; set; }
#nullable restore
#else
        public string ProductId { get; set; }
#endif
        /// <summary>The recurring_interval property</summary>
        [Obsolete("")]
        public global::Polar.OpenAPI.Models.SubscriptionRecurringInterval? RecurringInterval { get; set; }
        /// <summary>The type property</summary>
        public global::Polar.OpenAPI.Models.ProductPriceType? Type { get; set; }
        /// <summary>The price per unit in cents.</summary>
        public int? UnitAmount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.ProductPrice"/> and sets the default values.
        /// </summary>
        public ProductPrice()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.ProductPrice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.ProductPrice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount_type", n => { AmountType = n.GetStringValue(); } },
                { "cap_amount", n => { CapAmount = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount>(global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_archived", n => { IsArchived = n.GetBoolValue(); } },
                { "maximum_amount", n => { MaximumAmount = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount>(global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount.CreateFromDiscriminatorValue); } },
                { "meter", n => { Meter = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPriceMeter>(global::Polar.OpenAPI.Models.ProductPriceMeter.CreateFromDiscriminatorValue); } },
                { "meter_id", n => { MeterId = n.GetStringValue(); } },
                { "minimum_amount", n => { MinimumAmount = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount>(global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount.CreateFromDiscriminatorValue); } },
                { "modified_at", n => { ModifiedAt = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at>(global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at.CreateFromDiscriminatorValue); } },
                { "preset_amount", n => { PresetAmount = n.GetObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount>(global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount.CreateFromDiscriminatorValue); } },
                { "price_amount", n => { PriceAmount = n.GetIntValue(); } },
                { "price_currency", n => { PriceCurrency = n.GetStringValue(); } },
                { "product_id", n => { ProductId = n.GetStringValue(); } },
                { "recurring_interval", n => { RecurringInterval = n.GetEnumValue<global::Polar.OpenAPI.Models.SubscriptionRecurringInterval>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Polar.OpenAPI.Models.ProductPriceType>(); } },
                { "unit_amount", n => { UnitAmount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amount_type", AmountType);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount>("cap_amount", CapAmount);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_archived", IsArchived);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount>("maximum_amount", MaximumAmount);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPriceMeter>("meter", Meter);
            writer.WriteStringValue("meter_id", MeterId);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount>("minimum_amount", MinimumAmount);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at>("modified_at", ModifiedAt);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount>("preset_amount", PresetAmount);
            writer.WriteIntValue("price_amount", PriceAmount);
            writer.WriteStringValue("price_currency", PriceCurrency);
            writer.WriteStringValue("product_id", ProductId);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.SubscriptionRecurringInterval>("recurring_interval", RecurringInterval);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.ProductPriceType>("type", Type);
            writer.WriteIntValue("unit_amount", UnitAmount);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProductPrice_cap_amount : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1? ProductPriceCapAmountMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1 ProductPriceCapAmountMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_cap_amount();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.ProductPriceCapAmountMember1 = new global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ProductPriceCapAmountMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ProductPriceCapAmountMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice_cap_amountMember1>(null, ProductPriceCapAmountMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProductPrice_maximum_amount : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1? ProductPriceMaximumAmountMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1 ProductPriceMaximumAmountMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_maximum_amount();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.ProductPriceMaximumAmountMember1 = new global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ProductPriceMaximumAmountMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ProductPriceMaximumAmountMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice_maximum_amountMember1>(null, ProductPriceMaximumAmountMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProductPrice_minimum_amount : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1? ProductPriceMinimumAmountMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1 ProductPriceMinimumAmountMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_minimum_amount();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.ProductPriceMinimumAmountMember1 = new global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ProductPriceMinimumAmountMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ProductPriceMinimumAmountMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice_minimum_amountMember1>(null, ProductPriceMinimumAmountMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProductPrice_modified_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1? ProductPriceModifiedAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1 ProductPriceModifiedAtMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_modified_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.ProductPriceModifiedAtMember1 = new global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ProductPriceModifiedAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ProductPriceModifiedAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice_modified_atMember1>(null, ProductPriceModifiedAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProductPrice_preset_amount : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1? ProductPricePresetAmountMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1 ProductPricePresetAmountMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.ProductPrice.ProductPrice_preset_amount();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.ProductPricePresetAmountMember1 = new global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ProductPricePresetAmountMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(ProductPricePresetAmountMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.ProductPrice_preset_amountMember1>(null, ProductPricePresetAmountMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
