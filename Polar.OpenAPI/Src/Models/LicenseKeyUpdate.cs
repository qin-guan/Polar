// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LicenseKeyUpdate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The expires_at property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at? ExpiresAt { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at ExpiresAt { get; set; }
#endif
        /// <summary>The limit_activations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations? LimitActivations { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations LimitActivations { get; set; }
#endif
        /// <summary>The limit_usage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage? LimitUsage { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage LimitUsage { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Polar.OpenAPI.Models.LicenseKeyStatus? Status { get; set; }
        /// <summary>The usage property</summary>
        public int? Usage { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate"/> and sets the default values.
        /// </summary>
        public LicenseKeyUpdate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.LicenseKeyUpdate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.LicenseKeyUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "expires_at", n => { ExpiresAt = n.GetObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at>(global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at.CreateFromDiscriminatorValue); } },
                { "limit_activations", n => { LimitActivations = n.GetObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations>(global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations.CreateFromDiscriminatorValue); } },
                { "limit_usage", n => { LimitUsage = n.GetObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage>(global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Polar.OpenAPI.Models.LicenseKeyStatus>(); } },
                { "usage", n => { Usage = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at>("expires_at", ExpiresAt);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations>("limit_activations", LimitActivations);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage>("limit_usage", LimitUsage);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.LicenseKeyStatus>("status", Status);
            writer.WriteIntValue("usage", Usage);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyUpdate_expires_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1? LicenseKeyUpdateExpiresAtMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1 LicenseKeyUpdateExpiresAtMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_expires_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.LicenseKeyUpdateExpiresAtMember1 = new global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyUpdateExpiresAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyUpdateExpiresAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate_expires_atMember1>(null, LicenseKeyUpdateExpiresAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyUpdate_limit_activations : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1? LicenseKeyUpdateLimitActivationsMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1 LicenseKeyUpdateLimitActivationsMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_activations();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.LicenseKeyUpdateLimitActivationsMember1 = new global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyUpdateLimitActivationsMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyUpdateLimitActivationsMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_activationsMember1>(null, LicenseKeyUpdateLimitActivationsMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyUpdate_limit_usage : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1? LicenseKeyUpdateLimitUsageMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1 LicenseKeyUpdateLimitUsageMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.LicenseKeyUpdate.LicenseKeyUpdate_limit_usage();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.LicenseKeyUpdateLimitUsageMember1 = new global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyUpdateLimitUsageMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyUpdateLimitUsageMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.LicenseKeyUpdate_limit_usageMember1>(null, LicenseKeyUpdateLimitUsageMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
