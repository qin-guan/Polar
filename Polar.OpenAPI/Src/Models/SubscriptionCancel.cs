// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubscriptionCancel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Cancel an active subscription once the current period ends.Or uncancel a subscription currently set to be revoked at period end.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end? CancelAtPeriodEnd { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end CancelAtPeriodEnd { get; set; }
#endif
        /// <summary>Customer feedback and why they decided to cancel.**IMPORTANT:**Do not use this to store internal notes! It&apos;s intended to be inputfrom the customer and is therefore also available in their Polarpurchases library.Only set this in case your own service is requesting the reason from thecustomer. Or you copy a message directly from a customerconversation, i.e support.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment? CustomerCancellationComment { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment CustomerCancellationComment { get; set; }
#endif
        /// <summary>Customer reason for cancellation.Helpful to monitor reasons behind churn for future improvements.Only set this in case your own service is requesting the reason from thecustomer. Or you know based on direct conversations, i.e support, withthe customer.* `too_expensive`: Too expensive for the customer.* `missing_features`: Customer is missing certain features.* `switched_service`: Customer switched to another service.* `unused`: Customer is not using it enough.* `customer_service`: Customer is not satisfied with the customer service.* `low_quality`: Customer is unhappy with the quality.* `too_complex`: Customer considers the service too complicated.* `other`: Other reason(s).</summary>
        public global::Polar.OpenAPI.Models.CustomerCancellationReason? CustomerCancellationReason { get; set; }
        /// <summary>Cancel and revoke an active subscription immediately</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke? Revoke { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke Revoke { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel"/> and sets the default values.
        /// </summary>
        public SubscriptionCancel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.SubscriptionCancel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.SubscriptionCancel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cancel_at_period_end", n => { CancelAtPeriodEnd = n.GetObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end>(global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end.CreateFromDiscriminatorValue); } },
                { "customer_cancellation_comment", n => { CustomerCancellationComment = n.GetObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment>(global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment.CreateFromDiscriminatorValue); } },
                { "customer_cancellation_reason", n => { CustomerCancellationReason = n.GetEnumValue<global::Polar.OpenAPI.Models.CustomerCancellationReason>(); } },
                { "revoke", n => { Revoke = n.GetObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke>(global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end>("cancel_at_period_end", CancelAtPeriodEnd);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment>("customer_cancellation_comment", CustomerCancellationComment);
            writer.WriteEnumValue<global::Polar.OpenAPI.Models.CustomerCancellationReason>("customer_cancellation_reason", CustomerCancellationReason);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke>("revoke", Revoke);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubscriptionCancel_cancel_at_period_end : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1? SubscriptionCancelCancelAtPeriodEndMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1 SubscriptionCancelCancelAtPeriodEndMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_cancel_at_period_end();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else {
                    result.SubscriptionCancelCancelAtPeriodEndMember1 = new global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SubscriptionCancelCancelAtPeriodEndMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SubscriptionCancelCancelAtPeriodEndMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel_cancel_at_period_endMember1>(null, SubscriptionCancelCancelAtPeriodEndMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubscriptionCancel_customer_cancellation_comment : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1? SubscriptionCancelCustomerCancellationCommentMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1 SubscriptionCancelCustomerCancellationCommentMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_customer_cancellation_comment();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.SubscriptionCancelCustomerCancellationCommentMember1 = new global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SubscriptionCancelCustomerCancellationCommentMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SubscriptionCancelCustomerCancellationCommentMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel_customer_cancellation_commentMember1>(null, SubscriptionCancelCustomerCancellationCommentMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="bool"/>, <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SubscriptionCancel_revoke : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="bool"/></summary>
            public bool? Boolean { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1? SubscriptionCancelRevokeMember1 { get; set; }
#nullable restore
#else
            public global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1 SubscriptionCancelRevokeMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Polar.OpenAPI.Models.SubscriptionCancel.SubscriptionCancel_revoke();
                if(parseNode.GetBoolValue() is bool booleanValue)
                {
                    result.Boolean = booleanValue;
                }
                else {
                    result.SubscriptionCancelRevokeMember1 = new global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(SubscriptionCancelRevokeMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(SubscriptionCancelRevokeMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Boolean != null)
                {
                    writer.WriteBoolValue(null, Boolean);
                }
                else {
                    writer.WriteObjectValue<global::Polar.OpenAPI.Models.SubscriptionCancel_revokeMember1>(null, SubscriptionCancelRevokeMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
