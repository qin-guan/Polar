// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Polar.OpenAPI.Models
{
    /// <summary>
    /// Information about the returned metrics.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Metrics : IAdditionalDataHolder, IParsable
    {
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? ActiveSubscriptions { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric ActiveSubscriptions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? AverageOrderValue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric AverageOrderValue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? CumulativeRevenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric CumulativeRevenue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? MonthlyRecurringRevenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric MonthlyRecurringRevenue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? NewSubscriptions { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric NewSubscriptions { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? NewSubscriptionsRevenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric NewSubscriptionsRevenue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? OneTimeProducts { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric OneTimeProducts { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? OneTimeProductsRevenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric OneTimeProductsRevenue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? Orders { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric Orders { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? RenewedSubscriptions { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric RenewedSubscriptions { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? RenewedSubscriptionsRevenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric RenewedSubscriptionsRevenue { get; set; }
#endif
        /// <summary>Information about a metric.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Polar.OpenAPI.Models.Metric? Revenue { get; set; }
#nullable restore
#else
        public global::Polar.OpenAPI.Models.Metric Revenue { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Polar.OpenAPI.Models.Metrics"/> and sets the default values.
        /// </summary>
        public Metrics()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Polar.OpenAPI.Models.Metrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Polar.OpenAPI.Models.Metrics CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Polar.OpenAPI.Models.Metrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active_subscriptions", n => { ActiveSubscriptions = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "average_order_value", n => { AverageOrderValue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "cumulative_revenue", n => { CumulativeRevenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "monthly_recurring_revenue", n => { MonthlyRecurringRevenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "new_subscriptions", n => { NewSubscriptions = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "new_subscriptions_revenue", n => { NewSubscriptionsRevenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "one_time_products", n => { OneTimeProducts = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "one_time_products_revenue", n => { OneTimeProductsRevenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "orders", n => { Orders = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "renewed_subscriptions", n => { RenewedSubscriptions = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "renewed_subscriptions_revenue", n => { RenewedSubscriptionsRevenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
                { "revenue", n => { Revenue = n.GetObjectValue<global::Polar.OpenAPI.Models.Metric>(global::Polar.OpenAPI.Models.Metric.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("active_subscriptions", ActiveSubscriptions);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("average_order_value", AverageOrderValue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("cumulative_revenue", CumulativeRevenue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("monthly_recurring_revenue", MonthlyRecurringRevenue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("new_subscriptions", NewSubscriptions);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("new_subscriptions_revenue", NewSubscriptionsRevenue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("one_time_products", OneTimeProducts);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("one_time_products_revenue", OneTimeProductsRevenue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("orders", Orders);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("renewed_subscriptions", RenewedSubscriptions);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("renewed_subscriptions_revenue", RenewedSubscriptionsRevenue);
            writer.WriteObjectValue<global::Polar.OpenAPI.Models.Metric>("revenue", Revenue);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
