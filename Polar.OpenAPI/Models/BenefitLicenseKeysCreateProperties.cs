// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BenefitLicenseKeysCreateProperties : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.BenefitLicenseKeyActivationCreateProperties? Activations { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.BenefitLicenseKeyActivationCreateProperties Activations { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The expires property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.BenefitLicenseKeyExpirationProperties? Expires { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.BenefitLicenseKeyExpirationProperties Expires { get; set; }
#endif
        /// <summary>The limit_usage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage? LimitUsage { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage LimitUsage { get; set; }
#endif
        /// <summary>The prefix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix? Prefix { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix Prefix { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties"/> and sets the default values.
        /// </summary>
        public BenefitLicenseKeysCreateProperties()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.BenefitLicenseKeysCreateProperties CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.BenefitLicenseKeysCreateProperties();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activations", n => { Activations = n.GetObjectValue<global::ApiSdk.Models.BenefitLicenseKeyActivationCreateProperties>(global::ApiSdk.Models.BenefitLicenseKeyActivationCreateProperties.CreateFromDiscriminatorValue); } },
                { "expires", n => { Expires = n.GetObjectValue<global::ApiSdk.Models.BenefitLicenseKeyExpirationProperties>(global::ApiSdk.Models.BenefitLicenseKeyExpirationProperties.CreateFromDiscriminatorValue); } },
                { "limit_usage", n => { LimitUsage = n.GetObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage>(global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage.CreateFromDiscriminatorValue); } },
                { "prefix", n => { Prefix = n.GetObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix>(global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeyActivationCreateProperties>("activations", Activations);
            writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeyExpirationProperties>("expires", Expires);
            writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage>("limit_usage", LimitUsage);
            writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix>("prefix", Prefix);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitLicenseKeysCreateProperties_limit_usage : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1? BenefitLicenseKeysCreatePropertiesLimitUsageMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1 BenefitLicenseKeysCreatePropertiesLimitUsageMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_limit_usage();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.BenefitLicenseKeysCreatePropertiesLimitUsageMember1 = new global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BenefitLicenseKeysCreatePropertiesLimitUsageMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BenefitLicenseKeysCreatePropertiesLimitUsageMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_limit_usageMember1>(null, BenefitLicenseKeysCreatePropertiesLimitUsageMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitLicenseKeysCreateProperties_prefix : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1? BenefitLicenseKeysCreatePropertiesPrefixMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1 BenefitLicenseKeysCreatePropertiesPrefixMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.BenefitLicenseKeysCreateProperties.BenefitLicenseKeysCreateProperties_prefix();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.BenefitLicenseKeysCreatePropertiesPrefixMember1 = new global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BenefitLicenseKeysCreatePropertiesPrefixMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BenefitLicenseKeysCreatePropertiesPrefixMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.BenefitLicenseKeysCreateProperties_prefixMember1>(null, BenefitLicenseKeysCreatePropertiesPrefixMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
