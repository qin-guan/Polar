// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LicenseKeyValidate : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activation_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id? ActivationId { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id ActivationId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The benefit_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id? BenefitId { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id BenefitId { get; set; }
#endif
        /// <summary>The conditions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.LicenseKeyValidate_conditions? Conditions { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.LicenseKeyValidate_conditions Conditions { get; set; }
#endif
        /// <summary>The customer_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id? CustomerId { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id CustomerId { get; set; }
#endif
        /// <summary>The increment_usage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage? IncrementUsage { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage IncrementUsage { get; set; }
#endif
        /// <summary>The key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The organization_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrganizationId { get; set; }
#nullable restore
#else
        public string OrganizationId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.LicenseKeyValidate"/> and sets the default values.
        /// </summary>
        public LicenseKeyValidate()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.LicenseKeyValidate"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.LicenseKeyValidate CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.LicenseKeyValidate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activation_id", n => { ActivationId = n.GetObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id>(global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id.CreateFromDiscriminatorValue); } },
                { "benefit_id", n => { BenefitId = n.GetObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id>(global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id.CreateFromDiscriminatorValue); } },
                { "conditions", n => { Conditions = n.GetObjectValue<global::ApiSdk.Models.LicenseKeyValidate_conditions>(global::ApiSdk.Models.LicenseKeyValidate_conditions.CreateFromDiscriminatorValue); } },
                { "customer_id", n => { CustomerId = n.GetObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id>(global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id.CreateFromDiscriminatorValue); } },
                { "increment_usage", n => { IncrementUsage = n.GetObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage>(global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage.CreateFromDiscriminatorValue); } },
                { "key", n => { Key = n.GetStringValue(); } },
                { "organization_id", n => { OrganizationId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id>("activation_id", ActivationId);
            writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id>("benefit_id", BenefitId);
            writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate_conditions>("conditions", Conditions);
            writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id>("customer_id", CustomerId);
            writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage>("increment_usage", IncrementUsage);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("organization_id", OrganizationId);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyValidate_activation_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1? LicenseKeyValidateActivationIdMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1 LicenseKeyValidateActivationIdMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_activation_id();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.LicenseKeyValidateActivationIdMember1 = new global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyValidateActivationIdMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyValidateActivationIdMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate_activation_idMember1>(null, LicenseKeyValidateActivationIdMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyValidate_benefit_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1? LicenseKeyValidateBenefitIdMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1 LicenseKeyValidateBenefitIdMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_benefit_id();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.LicenseKeyValidateBenefitIdMember1 = new global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyValidateBenefitIdMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyValidateBenefitIdMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate_benefit_idMember1>(null, LicenseKeyValidateBenefitIdMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyValidate_customer_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1? LicenseKeyValidateCustomerIdMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1 LicenseKeyValidateCustomerIdMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_customer_id();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.LicenseKeyValidateCustomerIdMember1 = new global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyValidateCustomerIdMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyValidateCustomerIdMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate_customer_idMember1>(null, LicenseKeyValidateCustomerIdMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LicenseKeyValidate_increment_usage : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1? LicenseKeyValidateIncrementUsageMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1 LicenseKeyValidateIncrementUsageMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.LicenseKeyValidate.LicenseKeyValidate_increment_usage();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.LicenseKeyValidateIncrementUsageMember1 = new global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LicenseKeyValidateIncrementUsageMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LicenseKeyValidateIncrementUsageMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.LicenseKeyValidate_increment_usageMember1>(null, LicenseKeyValidateIncrementUsageMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
