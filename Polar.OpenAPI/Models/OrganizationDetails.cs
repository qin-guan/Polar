// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrganizationDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Brief information about you and your business.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? About { get; set; }
#nullable restore
#else
        public string About { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Main customer acquisition channels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CustomerAcquisition { get; set; }
#nullable restore
#else
        public List<string> CustomerAcquisition { get; set; }
#endif
        /// <summary>Estimated revenue in the next 12 months</summary>
        public int? FutureAnnualRevenue { get; set; }
        /// <summary>How the organization will integrate and use Polar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IntendedUse { get; set; }
#nullable restore
#else
        public string IntendedUse { get; set; }
#endif
        /// <summary>Revenue from last year if applicable.</summary>
        public int? PreviousAnnualRevenue { get; set; }
        /// <summary>Description of digital products being sold.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductDescription { get; set; }
#nullable restore
#else
        public string ProductDescription { get; set; }
#endif
        /// <summary>Switching from another platform?</summary>
        public bool? Switching { get; set; }
        /// <summary>Which platform the organization is migrating from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from? SwitchingFrom { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from SwitchingFrom { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.OrganizationDetails"/> and sets the default values.
        /// </summary>
        public OrganizationDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.OrganizationDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.OrganizationDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.OrganizationDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "about", n => { About = n.GetStringValue(); } },
                { "customer_acquisition", n => { CustomerAcquisition = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "future_annual_revenue", n => { FutureAnnualRevenue = n.GetIntValue(); } },
                { "intended_use", n => { IntendedUse = n.GetStringValue(); } },
                { "previous_annual_revenue", n => { PreviousAnnualRevenue = n.GetIntValue(); } },
                { "product_description", n => { ProductDescription = n.GetStringValue(); } },
                { "switching", n => { Switching = n.GetBoolValue(); } },
                { "switching_from", n => { SwitchingFrom = n.GetObjectValue<global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from>(global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("about", About);
            writer.WriteCollectionOfPrimitiveValues<string>("customer_acquisition", CustomerAcquisition);
            writer.WriteIntValue("future_annual_revenue", FutureAnnualRevenue);
            writer.WriteStringValue("intended_use", IntendedUse);
            writer.WriteIntValue("previous_annual_revenue", PreviousAnnualRevenue);
            writer.WriteStringValue("product_description", ProductDescription);
            writer.WriteBoolValue("switching", Switching);
            writer.WriteObjectValue<global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from>("switching_from", SwitchingFrom);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.OrganizationDetails_switching_fromMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OrganizationDetails_switching_from : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.OrganizationDetails_switching_fromMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.OrganizationDetails_switching_fromMember1? OrganizationDetailsSwitchingFromMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.OrganizationDetails_switching_fromMember1 OrganizationDetailsSwitchingFromMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.OrganizationDetails.OrganizationDetails_switching_from();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.OrganizationDetailsSwitchingFromMember1 = new global::ApiSdk.Models.OrganizationDetails_switching_fromMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(OrganizationDetailsSwitchingFromMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(OrganizationDetailsSwitchingFromMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.OrganizationDetails_switching_fromMember1>(null, OrganizationDetailsSwitchingFromMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
