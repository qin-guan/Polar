// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Properties for a benefit of type `github_repository`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BenefitGitHubRepositoryProperties : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The permission level to grant. Read more about roles and their permissions on [GitHub documentation](https://docs.github.com/en/organizations/managing-user-access-to-your-organizations-repositories/managing-repository-roles/repository-roles-for-an-organization#permissions-for-each-role).</summary>
        public global::ApiSdk.Models.BenefitGitHubRepositoryProperties_permission? Permission { get; set; }
        /// <summary>The repository_id property</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id? RepositoryId { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id RepositoryId { get; set; }
#endif
        /// <summary>The name of the repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryName { get; set; }
#nullable restore
#else
        public string RepositoryName { get; set; }
#endif
        /// <summary>The owner of the repository.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RepositoryOwner { get; set; }
#nullable restore
#else
        public string RepositoryOwner { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryProperties"/> and sets the default values.
        /// </summary>
        public BenefitGitHubRepositoryProperties()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryProperties"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.BenefitGitHubRepositoryProperties CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.BenefitGitHubRepositoryProperties();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "permission", n => { Permission = n.GetEnumValue<global::ApiSdk.Models.BenefitGitHubRepositoryProperties_permission>(); } },
                { "repository_id", n => { RepositoryId = n.GetObjectValue<global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id>(global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id.CreateFromDiscriminatorValue); } },
                { "repository_name", n => { RepositoryName = n.GetStringValue(); } },
                { "repository_owner", n => { RepositoryOwner = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::ApiSdk.Models.BenefitGitHubRepositoryProperties_permission>("permission", Permission);
            writer.WriteObjectValue<global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id>("repository_id", RepositoryId);
            writer.WriteStringValue("repository_name", RepositoryName);
            writer.WriteStringValue("repository_owner", RepositoryOwner);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BenefitGitHubRepositoryProperties_repository_id : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1? BenefitGitHubRepositoryPropertiesRepositoryIdMember1 { get; set; }
#nullable restore
#else
            public global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1 BenefitGitHubRepositoryPropertiesRepositoryIdMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::ApiSdk.Models.BenefitGitHubRepositoryProperties.BenefitGitHubRepositoryProperties_repository_id();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.BenefitGitHubRepositoryPropertiesRepositoryIdMember1 = new global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(BenefitGitHubRepositoryPropertiesRepositoryIdMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(BenefitGitHubRepositoryPropertiesRepositoryIdMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::ApiSdk.Models.BenefitGitHubRepositoryProperties_repository_idMember1>(null, BenefitGitHubRepositoryPropertiesRepositoryIdMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
